# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28

#We can see that 28 is the first triangle number to have over five divisors.

#What is the value of the first triangle number to have over five hundred divisors?

import numpy as np

def triangle_number(number):
        numbers = []
        for i in range(number + 1):
                numbers.append(i)
        return sum(numbers)

def all_factors(N):
        factors = []
        for i in range(1, int(np.sqrt(N) + 1)):
                if N % i == 0:
                        factors.append(i)
        factors.append(N)
        return factors


def is_it_fiveOO(n):
        return len(all_factors(n)) == 500

n = 2

while len(all_factors(triangle_number)) < 501:
        if is_it_fiveOO(triangle_number(n)):
                print(n, triangle_number(n))
        else:
                n += 1



print(n, triangle_number(n))
